from __future__ import annotations

from .pass_base import CPPPassWrapper as CPPPassWrapper
from .pass_base import PassType as PassType
from .pass_base import register_pass as register_pass

class FuseElementwiseAddActPass(CPPPassWrapper):
    def __init__(self) -> None: ...
    @property
    def cpp_name(self): ...

class FuseBatchNormActPass(CPPPassWrapper):
    def __init__(self) -> None: ...
    @property
    def cpp_name(self): ...

class FuseBatchNormAddActPass(CPPPassWrapper):
    def __init__(self) -> None: ...
    @property
    def cpp_name(self): ...

class FuseReluDepthwiseConvPass(CPPPassWrapper):
    def __init__(self) -> None: ...
    @property
    def cpp_name(self): ...

class FuseOptimizerPass(CPPPassWrapper):
    def __init__(self) -> None: ...
    @property
    def cpp_name(self): ...

class InplaceAddtoOpPass(CPPPassWrapper):
    def __init__(self) -> None: ...
    @property
    def cpp_name(self): ...
