from __future__ import annotations

from collections import OrderedDict as OrderedDict
from typing import Any, Optional

from .status import Status as Status

class Container:
    def __init__(self, entrypoint: Any = ..., rank: int = ..., env: Any = ...) -> None: ...
    @property
    def entrypoint(self): ...
    @entrypoint.setter
    def entrypoint(self, entry: Any) -> None: ...
    @property
    def rank(self): ...
    @rank.setter
    def rank(self, r: Any) -> None: ...
    @property
    def outfile(self): ...
    @outfile.setter
    def outfile(self, out: Any) -> None: ...
    @property
    def errfile(self): ...
    @errfile.setter
    def errfile(self, err: Any) -> None: ...
    def update_env(self, env: Any = ..., **kwargs: Any) -> None: ...
    def start(self): ...
    def terminate(self, force: bool = ...): ...
    def wait(self, timeout: Optional[Any] = ...) -> None: ...
    @property
    def exit_code(self): ...
    @property
    def status(self): ...
    def logs(self, fn: Optional[Any] = ..., offset: int = ..., whence: int = ..., limit: int = ...) -> None: ...
    def tail(self, length: int = ...) -> None: ...
