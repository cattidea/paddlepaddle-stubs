from __future__ import annotations

from typing import Any, Optional

def sequence_conv(
    input: Any,
    num_filters: Any,
    filter_size: int = ...,
    filter_stride: int = ...,
    padding: bool = ...,
    padding_start: Any | None = ...,
    bias_attr: Any | None = ...,
    param_attr: Any | None = ...,
    act: Any | None = ...,
    name: str | None = ...,
): ...
def sequence_softmax(input: Any, use_cudnn: bool = ..., name: str | None = ...): ...
def sequence_pool(input: Any, pool_type: Any, is_test: bool = ..., pad_value: float = ...): ...
def sequence_concat(input: Any, name: str | None = ...): ...
def sequence_first_step(input: Any): ...
def sequence_last_step(input: Any): ...
def sequence_slice(input: Any, offset: Any, length: Any, name: str | None = ...): ...
def sequence_expand(x: Any, y: Any, ref_level: int = ..., name: str | None = ...): ...
def sequence_expand_as(x: Any, y: Any, name: str | None = ...): ...
def sequence_pad(x: Any, pad_value: Any, maxlen: Any | None = ..., name: str | None = ...): ...
def sequence_unpad(x: Any, length: Any, name: str | None = ...): ...
def sequence_reshape(input: Any, new_dim: Any): ...
def sequence_scatter(input: Any, index: Any, updates: Any, name: str | None = ...): ...
def sequence_enumerate(input: Any, win_size: Any, pad_value: int = ..., name: str | None = ...): ...
def sequence_mask(x: Any, maxlen: Any | None = ..., dtype: str = ..., name: str | None = ...): ...
def sequence_reverse(x: Any, name: str | None = ...): ...
