from __future__ import annotations

from typing import Any, Optional

def resize_image(img: Any, target_size: Any): ...
def flip(im: Any): ...
def crop_img(im: Any, inner_size: Any, color: bool = ..., test: bool = ...): ...
def decode_jpeg(jpeg_string: Any): ...
def preprocess_img(im: Any, img_mean: Any, crop_size: Any, is_train: Any, color: bool = ...): ...
def load_meta(meta_path: Any, mean_img_size: Any, crop_size: Any, color: bool = ...): ...
def load_image(img_path: Any, is_color: bool = ...): ...
def oversample(img: Any, crop_dims: Any): ...

class ImageTransformer:
    is_color: Any = ...
    def __init__(
        self,
        transpose: Optional[Any] = ...,
        channel_swap: Optional[Any] = ...,
        mean: Optional[Any] = ...,
        is_color: bool = ...,
    ) -> None: ...
    transpose: Any = ...
    def set_transpose(self, order: Any) -> None: ...
    channel_swap: Any = ...
    def set_channel_swap(self, order: Any) -> None: ...
    mean: Any = ...
    def set_mean(self, mean: Any) -> None: ...
    def transformer(self, data: Any): ...
