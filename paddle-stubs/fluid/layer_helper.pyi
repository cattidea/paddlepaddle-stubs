from __future__ import annotations

from typing import Any, Optional

from . import core as core
from . import unique_name as unique_name
from .framework import OpProtoHolder as OpProtoHolder
from .framework import Parameter as Parameter
from .layer_helper_base import LayerHelperBase as LayerHelperBase
from .param_attr import ParamAttr as ParamAttr

class LayerHelper(LayerHelperBase):
    kwargs: Any = ...
    def __init__(self, layer_type: Any, **kwargs: Any) -> None: ...
    def append_op(self, *args: Any, **kwargs: Any): ...
    def multiple_input(self, input_param_name: str = ...): ...
    def input(self, input_param_name: str = ...): ...
    @property
    def param_attr(self): ...
    @property
    def bias_attr(self): ...
    def multiple_param_attr(self, length: Any): ...
    def iter_inputs_and_params(self, input_param_name: str = ...) -> None: ...
    def input_dtype(self, input_param_name: str = ...): ...
    def get_parameter(self, name: Any): ...
    def append_bias_op(self, input_var: Any, dim_start: int = ..., dim_end: Optional[Any] = ...): ...
    def append_activation(self, input_var: Any): ...
    def is_instance(self, param_name: Any, cls: Any) -> None: ...
