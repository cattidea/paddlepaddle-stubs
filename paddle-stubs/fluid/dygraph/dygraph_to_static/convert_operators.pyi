from __future__ import annotations

from typing import Any, Optional

def convert_while_loop(cond: Any, body: Any, loop_vars: Any): ...
def convert_logical_and(x_func: Any, y_func: Any): ...
def convert_logical_or(x_func: Any, y_func: Any): ...
def convert_logical_not(x: Any): ...
def convert_ifelse(pred: Any, true_fn: Any, false_fn: Any, true_args: Any, false_args: Any, return_vars: Any): ...
def convert_len(var: Any): ...
def convert_zip(*args: Any): ...
def convert_var_shape(x: Any, idx: Optional[Any] = ..., in_control_flow: bool = ...): ...
def convert_var_shape_simple(x: Any): ...
def eval_if_exist_else_none(name: Any, global_symbol_table: Any): ...
def choose_shape_attr_or_api(attr_shape: Any, api_shape: Any, idx: Optional[Any] = ...): ...
def convert_shape_compare(left: Any, *args: Any): ...
def cast_bool_if_necessary(var: Any): ...
def convert_var_dtype(var: Any, dtype: Any): ...
def convert_assert(cond: Any, message: str = ...): ...
def convert_print(*args: Any) -> None: ...
def convert_pop(target: Any, *args: Any): ...
