from __future__ import annotations

from typing import Any, Optional

class DataToLoDTensorConverter:
    place: Any = ...
    lod_level: Any = ...
    shape: Any = ...
    dtype: Any = ...
    def __init__(self, place: Any, lod_level: Any, shape: Any, dtype: Any) -> None: ...
    def feed(self, data: Any) -> None: ...
    def done(self): ...

class BatchedTensorProvider:
    place: Any = ...
    batch_size: Any = ...
    generator: Any = ...
    converters: Any = ...
    drop_last: Any = ...
    def __init__(self, feed_list: Any, place: Any, batch_size: Any, generator: Any, drop_last: Any) -> None: ...
    def __call__(self) -> None: ...

class DataFeeder:
    feed_dtypes: Any = ...
    feed_names: Any = ...
    feed_shapes: Any = ...
    feed_lod_level: Any = ...
    place: Any = ...
    def __init__(self, feed_list: Any, place: Any, program: Optional[Any] = ...) -> None: ...
    def feed(self, iterable: Any): ...
    def feed_parallel(self, iterable: Any, num_places: Optional[Any] = ...) -> None: ...
    def decorate_reader(
        self, reader: Any, multi_devices: Any, num_places: Optional[Any] = ..., drop_last: bool = ...
    ): ...
