from __future__ import annotations

from typing import Any, Optional

import paddle.nn as nn

model_urls: Any

class BasicBlock(nn.Layer):
    expansion: int = ...
    conv1: Any = ...
    bn1: Any = ...
    relu: Any = ...
    conv2: Any = ...
    bn2: Any = ...
    downsample: Any = ...
    stride: Any = ...
    def __init__(
        self,
        inplanes: Any,
        planes: Any,
        stride: int = ...,
        downsample: Optional[Any] = ...,
        groups: int = ...,
        base_width: int = ...,
        dilation: int = ...,
        norm_layer: Optional[Any] = ...,
    ) -> None: ...
    def forward(self, x: Any): ...

class BottleneckBlock(nn.Layer):
    expansion: int = ...
    conv1: Any = ...
    bn1: Any = ...
    conv2: Any = ...
    bn2: Any = ...
    conv3: Any = ...
    bn3: Any = ...
    relu: Any = ...
    downsample: Any = ...
    stride: Any = ...
    def __init__(
        self,
        inplanes: Any,
        planes: Any,
        stride: int = ...,
        downsample: Optional[Any] = ...,
        groups: int = ...,
        base_width: int = ...,
        dilation: int = ...,
        norm_layer: Optional[Any] = ...,
    ) -> None: ...
    def forward(self, x: Any): ...

class ResNet(nn.Layer):
    groups: Any = ...
    base_width: Any = ...
    num_classes: Any = ...
    with_pool: Any = ...
    inplanes: int = ...
    dilation: int = ...
    conv1: Any = ...
    bn1: Any = ...
    relu: Any = ...
    maxpool: Any = ...
    layer1: Any = ...
    layer2: Any = ...
    layer3: Any = ...
    layer4: Any = ...
    avgpool: Any = ...
    fc: Any = ...
    def __init__(
        self,
        block: Any,
        depth: int = ...,
        width: int = ...,
        num_classes: int = ...,
        with_pool: bool = ...,
        groups: int = ...,
    ) -> None: ...
    def forward(self, x: Any): ...

def resnet18(pretrained: bool = ..., **kwargs: Any): ...
def resnet34(pretrained: bool = ..., **kwargs: Any): ...
def resnet50(pretrained: bool = ..., **kwargs: Any): ...
def resnet101(pretrained: bool = ..., **kwargs: Any): ...
def resnet152(pretrained: bool = ..., **kwargs: Any): ...
def resnext50_32x4d(pretrained: bool = ..., **kwargs: Any): ...
def resnext50_64x4d(pretrained: bool = ..., **kwargs: Any): ...
def resnext101_32x4d(pretrained: bool = ..., **kwargs: Any): ...
def resnext101_64x4d(pretrained: bool = ..., **kwargs: Any): ...
def resnext152_32x4d(pretrained: bool = ..., **kwargs: Any): ...
def resnext152_64x4d(pretrained: bool = ..., **kwargs: Any): ...
def wide_resnet50_2(pretrained: bool = ..., **kwargs: Any): ...
def wide_resnet101_2(pretrained: bool = ..., **kwargs: Any): ...
