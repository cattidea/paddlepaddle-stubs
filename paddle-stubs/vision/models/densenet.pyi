from __future__ import annotations

from typing import Any, Optional

import paddle.nn as nn

model_urls: Any

class BNACConvLayer(nn.Layer):
    def __init__(
        self,
        num_channels: Any,
        num_filters: Any,
        filter_size: Any,
        stride: int = ...,
        pad: int = ...,
        groups: int = ...,
        act: str = ...,
    ) -> None: ...
    def forward(self, input: Any): ...

class DenseLayer(nn.Layer):
    dropout: Any = ...
    bn_ac_func1: Any = ...
    bn_ac_func2: Any = ...
    dropout_func: Any = ...
    def __init__(self, num_channels: Any, growth_rate: Any, bn_size: Any, dropout: Any) -> None: ...
    def forward(self, input: Any): ...

class DenseBlock(nn.Layer):
    dropout: Any = ...
    dense_layer_func: Any = ...
    def __init__(
        self,
        num_channels: Any,
        num_layers: Any,
        bn_size: Any,
        growth_rate: Any,
        dropout: Any,
        name: Optional[Any] = ...,
    ) -> None: ...
    def forward(self, input: Any): ...

class TransitionLayer(nn.Layer):
    conv_ac_func: Any = ...
    pool2d_avg: Any = ...
    def __init__(self, num_channels: Any, num_output_features: Any) -> None: ...
    def forward(self, input: Any): ...

class ConvBNLayer(nn.Layer):
    def __init__(
        self,
        num_channels: Any,
        num_filters: Any,
        filter_size: Any,
        stride: int = ...,
        pad: int = ...,
        groups: int = ...,
        act: str = ...,
    ) -> None: ...
    def forward(self, input: Any): ...

class DenseNet(nn.Layer):
    num_classes: Any = ...
    with_pool: Any = ...
    conv1_func: Any = ...
    pool2d_max: Any = ...
    block_config: Any = ...
    dense_block_func_list: Any = ...
    transition_func_list: Any = ...
    batch_norm: Any = ...
    pool2d_avg: Any = ...
    out: Any = ...
    def __init__(
        self, layers: int = ..., bn_size: int = ..., dropout: float = ..., num_classes: int = ..., with_pool: bool = ...
    ) -> None: ...
    def forward(self, input: Any): ...

def densenet121(pretrained: bool = ..., **kwargs: Any): ...
def densenet161(pretrained: bool = ..., **kwargs: Any): ...
def densenet169(pretrained: bool = ..., **kwargs: Any): ...
def densenet201(pretrained: bool = ..., **kwargs: Any): ...
def densenet264(pretrained: bool = ..., **kwargs: Any): ...
