from __future__ import annotations

from typing import Any, Optional

from paddle.common_ops_import import core as core

from ..fluid import layers as layers
from ..fluid.data_feeder import check_dtype as check_dtype
from ..fluid.data_feeder import check_type as check_type
from ..fluid.data_feeder import check_variable_and_dtype as check_variable_and_dtype
from ..fluid.framework import in_dygraph_mode as in_dygraph_mode
from ..fluid.layer_helper import LayerHelper as LayerHelper
from ..fluid.layers import cast as cast
from ..fluid.layers import transpose as transpose
from ..static import Variable as Variable

K_DEFAULT_DIM: int

def matmul(x: Any, y: Any, transpose_x: bool = ..., transpose_y: bool = ..., name: Optional[Any] = ...): ...
def norm(x: Any, p: str = ..., axis: Optional[Any] = ..., keepdim: bool = ..., name: Optional[Any] = ...): ...
def dist(x: Any, y: Any, p: int = ..., name: Optional[Any] = ...): ...
def cond(x: Any, p: Optional[Any] = ..., name: Optional[Any] = ...): ...
def dot(x: Any, y: Any, name: Optional[Any] = ...): ...
def cov(
    x: Any,
    rowvar: bool = ...,
    ddof: bool = ...,
    fweights: Optional[Any] = ...,
    aweights: Optional[Any] = ...,
    name: Optional[Any] = ...,
): ...
def t(input: Any, name: Optional[Any] = ...): ...
def cross(x: Any, y: Any, axis: int = ..., name: Optional[Any] = ...): ...
def cholesky(x: Any, upper: bool = ..., name: Optional[Any] = ...): ...
def matrix_rank(x: Any, tol: Optional[Any] = ..., hermitian: bool = ..., name: Optional[Any] = ...): ...
def bmm(x: Any, y: Any, name: Optional[Any] = ...): ...
def histogram(input: Any, bins: int = ..., min: int = ..., max: int = ..., name: Optional[Any] = ...): ...
def bincount(x: Any, weights: Optional[Any] = ..., minlength: int = ..., name: Optional[Any] = ...): ...
def mv(x: Any, vec: Any, name: Optional[Any] = ...): ...
def det(x: Any, name: Optional[Any] = ...): ...
def slogdet(x: Any, name: Optional[Any] = ...): ...
def svd(x: Any, full_matrices: bool = ..., name: Optional[Any] = ...): ...
def matrix_power(x: Any, n: Any, name: Optional[Any] = ...): ...
def qr(x: Any, mode: str = ..., name: Optional[Any] = ...): ...
def lu(x: Any, pivot: bool = ..., get_infos: bool = ..., name: Optional[Any] = ...): ...
def lu_unpack(x: Any, y: Any, unpack_ludata: bool = ..., unpack_pivots: bool = ..., name: Optional[Any] = ...): ...
def eig(x: Any, name: Optional[Any] = ...): ...
def eigvals(x: Any, name: Optional[Any] = ...): ...
def multi_dot(x: Any, name: Optional[Any] = ...): ...
def eigh(x: Any, UPLO: str = ..., name: Optional[Any] = ...): ...
def pinv(x: Any, rcond: float = ..., hermitian: bool = ..., name: Optional[Any] = ...): ...
def solve(x: Any, y: Any, name: Optional[Any] = ...): ...
def triangular_solve(
    x: Any, y: Any, upper: bool = ..., transpose: bool = ..., unitriangular: bool = ..., name: Optional[Any] = ...
): ...
def cholesky_solve(x: Any, y: Any, upper: bool = ..., name: Optional[Any] = ...): ...
def eigvalsh(x: Any, UPLO: str = ..., name: Optional[Any] = ...): ...
def lstsq(x: Any, y: Any, rcond: Optional[Any] = ..., driver: Optional[Any] = ..., name: Optional[Any] = ...): ...
