from __future__ import annotations

from typing import Any, Optional

from .._typing import NumbericSequence, ShapeLike, Tensor
from ..base import layers as layers
from ..base.data_feeder import check_dtype as check_dtype
from ..base.data_feeder import check_type as check_type
from ..base.data_feeder import check_variable_and_dtype as check_variable_and_dtype
from ..base.data_feeder import convert_dtype as convert_dtype
from ..base.dygraph.inplace_utils import (
    inplace_apis_in_dygraph_only as inplace_apis_in_dygraph_only,
)
from ..base.framework import in_dygraph_mode as in_dygraph_mode
from ..base.layer_helper import LayerHelper as LayerHelper
from ..base.layers import cast as cast
from ..base.layers import scatter_nd as scatter_nd
from ..base.layers import shard_index as shard_index
from ..base.layers import slice as slice
from ..base.layers import transpose as transpose
from ..base.layers import unstack as unstack
from ..base.layers import utils as utils
from ..framework import OpProtoHolder as OpProtoHolder
from ..framework import convert_np_dtype_to_dtype_ as convert_np_dtype_to_dtype_
from ..framework import core as core
from ..framework import dygraph_only as dygraph_only
from ..static import Variable as Variable
from ..static import device_guard as device_guard

def fill_(x: Any, value: Any): ...
def zero_(x: Any): ...
def fill_diagonal_(x: Any, value: Any, offset: int = ..., wrap: bool = ..., name: str | None = ...): ...
def fill_diagonal_tensor_(
    x: Any, y: Any, offset: int = ..., dim1: int = ..., dim2: int = ..., name: str | None = ...
): ...
def fill_diagonal_tensor(
    x: Any, y: Any, offset: int = ..., dim1: int = ..., dim2: int = ..., name: str | None = ...
): ...
def tolist(x: Any): ...
def concat(x: Any, axis: int = ..., name: str | None = ...): ...
def broadcast_tensors(input: Any, name: str | None = ...): ...
def flip(x: Any, axis: Any, name: str | None = ...): ...
def rot90(x: Any, k: int = ..., axes: Any = ..., name: str | None = ...): ...
def flatten(x: Any, start_axis: int = ..., stop_axis: int = ..., name: str | None = ...): ...
def flatten_(x: Any, start_axis: int = ..., stop_axis: int = ..., name: str | None = ...): ...
def roll(x: Any, shifts: Any, axis: Any | None = ..., name: str | None = ...): ...
def stack(x: Any, axis: int = ..., name: str | None = ...): ...
def split(x: Any, num_or_sections: Any, axis: int = ..., name: str | None = ...): ...
def squeeze(x: Any, axis: Any | None = ..., name: str | None = ...): ...
def squeeze_(x: Any, axis: Any | None = ..., name: str | None = ...): ...
def unique_consecutive(
    x: Any,
    return_inverse: bool = ...,
    return_counts: bool = ...,
    axis: Any | None = ...,
    dtype: str = ...,
    name: str | None = ...,
): ...
def unique(
    x: Any,
    return_index: bool = ...,
    return_inverse: bool = ...,
    return_counts: bool = ...,
    axis: Any | None = ...,
    dtype: str = ...,
    name: str | None = ...,
): ...
def unsqueeze(x: Any, axis: Any, name: str | None = ...): ...
def unsqueeze_(x: Any, axis: Any, name: str | None = ...): ...
def gather(x: Any, index: Any, axis: Any | None = ..., name: str | None = ...): ...
def unbind(input: Any, axis: int = ...): ...
def scatter(x: Any, index: Any, updates: Any, overwrite: bool = ..., name: str | None = ...): ...
def scatter_(x: Any, index: Any, updates: Any, overwrite: bool = ..., name: str | None = ...): ...
def scatter_nd_add(x: Any, index: Any, updates: Any, name: str | None = ...): ...
def chunk(x: Any, chunks: Any, axis: int = ..., name: str | None = ...): ...
def tile(x: Any, repeat_times: Any, name: str | None = ...): ...
def expand_as(x: Any, y: Any, name: str | None = ...): ...
def broadcast_to(x: Any, shape: Any, name: str | None = ...): ...
def expand(x: Any, shape: Any, name: str | None = ...): ...
def reshape(x: Any, shape: Any, name: str | None = ...): ...
def reshape_(x: Any, shape: Any, name: str | None = ...): ...
def gather_nd(x: Any, index: Any, name: str | None = ...): ...
def strided_slice(x: Any, axes: Any, starts: Any, ends: Any, strides: Any, name: str | None = ...): ...
def tensordot(x: Any, y: Any, axes: int = ..., name: str | None = ...): ...
def as_complex(x: Any, name: str | None = ...): ...
def as_real(x: Any, name: str | None = ...): ...
def repeat_interleave(x: Any, repeats: Any, axis: Any | None = ..., name: str | None = ...): ...
def moveaxis(x: Any, source: Any, destination: Any, name: str | None = ...): ...
def non_negative_axis(arr: Any, axis: Any): ...
def infer_broadcast_shape(arr: Any, indices: Any, axis: Any): ...
def take_along_axis(arr: Any, indices: Any, axis: Any): ...
def put_along_axis(arr: Any, indices: Any, values: Any, axis: Any, reduce: str = ...): ...
def put_along_axis_(arr: Any, indices: Any, values: Any, axis: Any, reduce: str = ...): ...
def crop(
    x: Tensor, shape: ShapeLike = ..., offsets: NumbericSequence | Tensor = ..., name: str | None = None
) -> Tensor: ...
