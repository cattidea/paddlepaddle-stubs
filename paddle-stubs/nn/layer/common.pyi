from __future__ import annotations

from typing import Any, Optional

from paddle.nn import Layer

from ...fluid.dygraph import Flatten as Flatten

class Identity(Layer):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def forward(self, input: Any): ...

class Linear(Layer):
    weight: Any = ...
    bias: Any = ...
    name: Any = ...
    def __init__(
        self,
        in_features: Any,
        out_features: Any,
        weight_attr: Optional[Any] = ...,
        bias_attr: Optional[Any] = ...,
        name: Optional[Any] = ...,
    ) -> None: ...
    def forward(self, input: Any): ...
    def extra_repr(self): ...

class Upsample(Layer):
    size: Any = ...
    scale_factor: Any = ...
    mode: Any = ...
    align_corners: Any = ...
    align_mode: Any = ...
    data_format: Any = ...
    name: Any = ...
    def __init__(
        self,
        size: Optional[Any] = ...,
        scale_factor: Optional[Any] = ...,
        mode: str = ...,
        align_corners: bool = ...,
        align_mode: int = ...,
        data_format: str = ...,
        name: Optional[Any] = ...,
    ) -> None: ...
    def forward(self, x: Any): ...
    def extra_repr(self): ...

class UpsamplingNearest2D(Layer):
    size: Any = ...
    scale_factor: Any = ...
    data_format: Any = ...
    name: Any = ...
    def __init__(
        self,
        size: Optional[Any] = ...,
        scale_factor: Optional[Any] = ...,
        data_format: str = ...,
        name: Optional[Any] = ...,
    ) -> None: ...
    def forward(self, x: Any): ...
    def extra_repr(self): ...

class UpsamplingBilinear2D(Layer):
    size: Any = ...
    scale_factor: Any = ...
    data_format: Any = ...
    name: Any = ...
    def __init__(
        self,
        size: Optional[Any] = ...,
        scale_factor: Optional[Any] = ...,
        data_format: str = ...,
        name: Optional[Any] = ...,
    ) -> None: ...
    def forward(self, x: Any): ...
    def extra_repr(self): ...

class Bilinear(Layer):
    weight: Any = ...
    bias: Any = ...
    def __init__(
        self,
        in1_features: Any,
        in2_features: Any,
        out_features: Any,
        weight_attr: Optional[Any] = ...,
        bias_attr: Optional[Any] = ...,
        name: Optional[Any] = ...,
    ) -> None: ...
    def forward(self, x1: Any, x2: Any): ...
    def extra_repr(self): ...

class Dropout(Layer):
    p: Any = ...
    axis: Any = ...
    mode: Any = ...
    name: Any = ...
    def __init__(
        self, p: float = ..., axis: Optional[Any] = ..., mode: str = ..., name: Optional[Any] = ...
    ) -> None: ...
    def forward(self, input: Any): ...
    def extra_repr(self): ...

class Dropout2D(Layer):
    p: Any = ...
    data_format: Any = ...
    name: Any = ...
    def __init__(self, p: float = ..., data_format: str = ..., name: Optional[Any] = ...) -> None: ...
    def forward(self, input: Any): ...
    def extra_repr(self): ...

class Dropout3D(Layer):
    p: Any = ...
    data_format: Any = ...
    name: Any = ...
    def __init__(self, p: float = ..., data_format: str = ..., name: Optional[Any] = ...) -> None: ...
    def forward(self, input: Any): ...
    def extra_repr(self): ...

class AlphaDropout(Layer):
    p: Any = ...
    name: Any = ...
    def __init__(self, p: float = ..., name: Optional[Any] = ...) -> None: ...
    def forward(self, input: Any): ...
    def extra_repr(self): ...

class Pad1D(Layer):
    def __init__(
        self, padding: Any, mode: str = ..., value: float = ..., data_format: str = ..., name: Optional[Any] = ...
    ) -> None: ...
    def forward(self, x: Any): ...
    def extra_repr(self): ...

class Pad2D(Layer):
    def __init__(
        self, padding: Any, mode: str = ..., value: float = ..., data_format: str = ..., name: Optional[Any] = ...
    ) -> None: ...
    def forward(self, x: Any): ...
    def extra_repr(self): ...

class ZeroPad2D(Layer):
    def __init__(self, padding: Any, data_format: str = ..., name: Optional[Any] = ...) -> None: ...
    def forward(self, x: Any): ...
    def extra_repr(self): ...

class Pad3D(Layer):
    def __init__(
        self, padding: Any, mode: str = ..., value: float = ..., data_format: str = ..., name: Optional[Any] = ...
    ) -> None: ...
    def forward(self, x: Any): ...
    def extra_repr(self): ...

class CosineSimilarity(Layer):
    def __init__(self, axis: int = ..., eps: float = ...) -> None: ...
    def forward(self, x1: Any, x2: Any): ...
    def extra_repr(self): ...

class Embedding(Layer):
    weight: Any = ...
    def __init__(
        self,
        num_embeddings: Any,
        embedding_dim: Any,
        padding_idx: Optional[Any] = ...,
        sparse: bool = ...,
        weight_attr: Optional[Any] = ...,
        name: Optional[Any] = ...,
    ) -> None: ...
    def forward(self, x: Any): ...
    def extra_repr(self): ...

class Unfold(Layer):
    kernel_sizes: Any = ...
    dilations: Any = ...
    paddings: Any = ...
    strides: Any = ...
    name: Any = ...
    def __init__(
        self,
        kernel_sizes: Any,
        dilations: int = ...,
        paddings: int = ...,
        strides: int = ...,
        name: Optional[Any] = ...,
    ) -> None: ...
    def forward(self, input: Any): ...
    def extra_repr(self): ...

class Fold(Layer):
    output_sizes: Any = ...
    kernel_sizes: Any = ...
    dilations: Any = ...
    paddings: Any = ...
    strides: Any = ...
    name: Any = ...
    def __init__(
        self,
        output_sizes: Any,
        kernel_sizes: Any,
        dilations: int = ...,
        paddings: int = ...,
        strides: int = ...,
        name: Optional[Any] = ...,
    ) -> None: ...
    def forward(self, input: Any): ...
    def extra_repr(self): ...
