from __future__ import annotations

from typing import Any, Optional

class Variable:
    def __init__(self, is_discrete: bool = ..., event_rank: int = ..., constraint: Optional[Any] = ...) -> None: ...
    @property
    def is_discrete(self): ...
    @property
    def event_rank(self): ...
    def constraint(self, value: Any): ...

class Real(Variable):
    def __init__(self, event_rank: int = ...) -> None: ...

class Positive(Variable):
    def __init__(self, event_rank: int = ...) -> None: ...

class Independent(Variable):
    def __init__(self, base: Any, reinterpreted_batch_rank: Any) -> None: ...
    def constraint(self, value: Any): ...

class Stack(Variable):
    def __init__(self, vars: Any, axis: int = ...) -> None: ...
    @property
    def is_discrete(self): ...
    @property
    def event_rank(self): ...
    def constraint(self, value: Any): ...

real: Any
positive: Any
